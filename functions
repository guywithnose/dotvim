" vim: filetype=vim

" Build and run the docker file in the current directory
function! DockerBuild()
  let b:imageName=fnamemodify(bufname('%'), ':p:h:t')
  execute '!docker build -t ' . b:imageName . ' . && docker run -it ' . b:imageName . ' bash'
endfunction

" Push to the currently checked out branch
" If no branch is checked out this does nothing and echos a warning
function! PushCurrentBranch()
  let b:currentBranchName=fugitive#head()
  if b:currentBranchName != ''
    execute 'Gpush origin ' . b:currentBranchName
  else
    echo 'Not currently on a branch!'
  endif
endfunction

" Push to the currently checked out branch with the --force option
" If no branch is checked out this does nothing and echos a warning
function! PushCurrentBranchForce()
  let b:currentBranchName=fugitive#head()
  if b:currentBranchName != ''
    execute 'Gpush --force origin ' . b:currentBranchName
  else
    echo 'Not currently on a branch!'
  endif
endfunction

" Break a PHP array onto multiple lines
function! SplitArray()
  let oldSearch = @/

  execute 's/\[\(.\)/\[\r\1/g | s/, /,\r/g | s/\(.\)\]/\1,\r\]/g | normal =a]'

  let @/ = oldSearch
endfunction

" Sets the tabstop, softtabstop, and shiftwidth to the same value
function! Stab()
  let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
  if l:tabstop > 0
    let &l:softtabstop = l:tabstop
    let &l:tabstop = l:tabstop
    let &l:shiftwidth = l:tabstop
  endif
endfunction

" Set the current search register to the contents of the current visual
" selection.
function! VSetSearch()
  let temp = @s
  normal! gv"sy
  let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

" Set the arglist by the files contained in the quickfix list
function! QuickfixArgs()
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  exec 'silent args ' join(map(values(buffer_numbers), 'fnameescape(v:val)'))
endfunction

" Remove whitespace at the end of lines
function! StripTrailingWhitespaces()
  let _s=@/
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  let @/=_s
  call cursor(l, c)
endfunction

" Detect whitespace at the end of lines
function! FindTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  let searchCount = 0
  normal G$
  let flags = "w"
  while search('\s\+$', flags)
    normal j0
    let searchCount += 1
    let flags = "W"
  endwhile
  call cursor(l, c)
  if searchCount > 0
    echo 'Found' searchCount 'lines with trailing whitespace'
  endif
endfunction
